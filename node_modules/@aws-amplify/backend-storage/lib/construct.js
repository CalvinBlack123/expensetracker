import { Construct } from 'constructs';
import { Bucket, HttpMethods, } from 'aws-cdk-lib/aws-s3';
import { RemovalPolicy, Stack } from 'aws-cdk-lib';
import { AttributionMetadataStorage } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'node:url';
import { S3EventSourceV2 } from 'aws-cdk-lib/aws-lambda-event-sources';
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Storage in BI metrics
const storageStackType = 'storage-S3';
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export class AmplifyStorage extends Construct {
    resources;
    isDefault;
    name;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.isDefault = props.isDefault || false;
        this.name = props.name;
        const bucketProps = {
            versioned: props.versioned || false,
            cors: [
                {
                    maxAge: 3000,
                    exposedHeaders: [
                        'x-amz-server-side-encryption',
                        'x-amz-request-id',
                        'x-amz-id-2',
                        'ETag',
                    ],
                    allowedHeaders: ['*'],
                    allowedOrigins: ['*'],
                    allowedMethods: [
                        HttpMethods.GET,
                        HttpMethods.HEAD,
                        HttpMethods.PUT,
                        HttpMethods.POST,
                        HttpMethods.DELETE,
                    ],
                },
            ],
            autoDeleteObjects: true,
            removalPolicy: RemovalPolicy.DESTROY,
            enforceSSL: true,
        };
        const bucket = new Bucket(this, 'Bucket', bucketProps);
        this.resources = {
            bucket,
            cfnResources: {
                cfnBucket: bucket.node.findChild('Resource'),
            },
        };
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), storageStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    /**
     * Attach a Lambda function trigger handler to the S3 events
     * @param events - list of S3 events that will trigger the handler
     * @param handler - The function that will handle the event
     */
    addTrigger = (events, handler) => {
        handler.addEventSource(new S3EventSourceV2(this.resources.bucket, { events }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFDTCxNQUFNLEVBSU4sV0FBVyxHQUVaLE1BQU0sb0JBQW9CLENBQUM7QUFRNUIsT0FBTyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdkUseUhBQXlIO0FBQ3pILE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO0FBaUR0Qzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGNBQ1gsU0FBUSxTQUFTO0lBR1IsU0FBUyxDQUFtQjtJQUM1QixTQUFTLENBQVU7SUFDbkIsSUFBSSxDQUFTO0lBQ3RCOztPQUVHO0lBQ0gsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEwQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBRXZCLE1BQU0sV0FBVyxHQUFnQjtZQUMvQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsSUFBSSxLQUFLO1lBQ25DLElBQUksRUFBRTtnQkFDSjtvQkFDRSxNQUFNLEVBQUUsSUFBSTtvQkFDWixjQUFjLEVBQUU7d0JBQ2QsOEJBQThCO3dCQUM5QixrQkFBa0I7d0JBQ2xCLFlBQVk7d0JBQ1osTUFBTTtxQkFDUDtvQkFDRCxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7b0JBQ3JCLGNBQWMsRUFBRSxDQUFDLEdBQUcsQ0FBQztvQkFDckIsY0FBYyxFQUFFO3dCQUNkLFdBQVcsQ0FBQyxHQUFHO3dCQUNmLFdBQVcsQ0FBQyxJQUFJO3dCQUNoQixXQUFXLENBQUMsR0FBRzt3QkFDZixXQUFXLENBQUMsSUFBSTt3QkFDaEIsV0FBVyxDQUFDLE1BQU07cUJBQ25CO2lCQUNGO2FBQ0Y7WUFDRCxpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLGFBQWEsRUFBRSxhQUFhLENBQUMsT0FBTztZQUNwQyxVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV2RCxJQUFJLENBQUMsU0FBUyxHQUFHO1lBQ2YsTUFBTTtZQUNOLFlBQVksRUFBRTtnQkFDWixTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFjO2FBQzFEO1NBQ0YsQ0FBQztRQUVGLElBQUksMEJBQTBCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FDdkQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDZCxnQkFBZ0IsRUFDaEIsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDM0QsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxHQUFHLENBQUMsTUFBbUIsRUFBRSxPQUFrQixFQUFRLEVBQUU7UUFDN0QsT0FBTyxDQUFDLGNBQWMsQ0FDcEIsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUN2RCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gIEJ1Y2tldCxcbiAgQnVja2V0UHJvcHMsXG4gIENmbkJ1Y2tldCxcbiAgRXZlbnRUeXBlLFxuICBIdHRwTWV0aG9kcyxcbiAgSUJ1Y2tldCxcbn0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIEZ1bmN0aW9uUmVzb3VyY2VzLFxuICBSZXNvdXJjZVByb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFN0b3JhZ2VPdXRwdXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBSZW1vdmFsUG9saWN5LCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXN0b3JhZ2UnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7IElGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUzNFdmVudFNvdXJjZVYyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzJztcblxuLy8gQmUgdmVyeSBjYXJlZnVsIGVkaXRpbmcgdGhpcyB2YWx1ZS4gSXQgaXMgdGhlIHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gYXR0cmlidXRlIHN0YWNrcyB0byBBbXBsaWZ5IFN0b3JhZ2UgaW4gQkkgbWV0cmljc1xuY29uc3Qgc3RvcmFnZVN0YWNrVHlwZSA9ICdzdG9yYWdlLVMzJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeVN0b3JhZ2VUcmlnZ2VyRXZlbnQgPSAnb25EZWxldGUnIHwgJ29uVXBsb2FkJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeVN0b3JhZ2VQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBzdG9yYWdlIHJlc291cmNlIGlzIHRoZSBkZWZhdWx0IHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBiYWNrZW5kLlxuICAgKiByZXF1aXJlZCBhbmQgcmVsZXZhbnQgb25seSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgc3RvcmFnZSByZXNvdXJjZXMgZGVmaW5lZC5cbiAgICogQGRlZmF1bHQgZmFsc2UuXG4gICAqL1xuICBpc0RlZmF1bHQ/OiBib29sZWFuO1xuICAvKipcbiAgICogRnJpZW5kbHkgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXJpdmUgdGhlIFMzIEJ1Y2tldCBuYW1lXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBTMyBvYmplY3QgdmVyc2lvbmluZyBvbiB0aGUgYnVja2V0LlxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvdXNlcmd1aWRlL1ZlcnNpb25pbmcuaHRtbFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmVyc2lvbmVkPzogYm9vbGVhbjtcbiAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5PzogQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneTxTdG9yYWdlT3V0cHV0PjtcbiAgLyoqXG4gICAqIFMzIGV2ZW50IHRyaWdnZXIgY29uZmlndXJhdGlvblxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hbXBsaWZ5LmF3cy9nZW4yL2J1aWxkLWEtYmFja2VuZC9zdG9yYWdlLyNjb25maWd1cmUtc3RvcmFnZS10cmlnZ2Vyc1xuICAgKiBAZXhhbXBsZVxuICAgKiBpbXBvcnQgeyB0cmlnZ2VySGFuZGxlciB9IGZyb20gJy4uL2Z1bmN0aW9ucy90cmlnZ2VyLWhhbmRsZXIvcmVzb3VyY2UudHMnXG4gICAqXG4gICAqIGV4cG9ydCBjb25zdCBzdG9yYWdlID0gZGVmaW5lU3RvcmFnZSh7XG4gICAqICAgdHJpZ2dlcnM6IHtcbiAgICogICAgIG9uVXBsb2FkOiB0cmlnZ2VySGFuZGxlclxuICAgKiAgIH1cbiAgICogfSlcbiAgICovXG4gIHRyaWdnZXJzPzogUGFydGlhbDxcbiAgICBSZWNvcmQ8XG4gICAgICBBbXBsaWZ5U3RvcmFnZVRyaWdnZXJFdmVudCxcbiAgICAgIENvbnN0cnVjdEZhY3Rvcnk8UmVzb3VyY2VQcm92aWRlcjxGdW5jdGlvblJlc291cmNlcz4+XG4gICAgPlxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgU3RvcmFnZVJlc291cmNlcyA9IHtcbiAgYnVja2V0OiBJQnVja2V0O1xuICBjZm5SZXNvdXJjZXM6IHtcbiAgICBjZm5CdWNrZXQ6IENmbkJ1Y2tldDtcbiAgfTtcbn07XG5cbi8qKlxuICogQW1wbGlmeSBTdG9yYWdlIENESyBDb25zdHJ1Y3RcbiAqXG4gKiBDdXJyZW50bHkganVzdCBhIHRoaW4gd3JhcHBlciBhcm91bmQgYW4gUzMgYnVja2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBBbXBsaWZ5U3RvcmFnZVxuICBleHRlbmRzIENvbnN0cnVjdFxuICBpbXBsZW1lbnRzIFJlc291cmNlUHJvdmlkZXI8U3RvcmFnZVJlc291cmNlcz5cbntcbiAgcmVhZG9ubHkgcmVzb3VyY2VzOiBTdG9yYWdlUmVzb3VyY2VzO1xuICByZWFkb25seSBpc0RlZmF1bHQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBBbXBsaWZ5U3RvcmFnZSBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFtcGxpZnlTdG9yYWdlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMuaXNEZWZhdWx0ID0gcHJvcHMuaXNEZWZhdWx0IHx8IGZhbHNlO1xuICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWU7XG5cbiAgICBjb25zdCBidWNrZXRQcm9wczogQnVja2V0UHJvcHMgPSB7XG4gICAgICB2ZXJzaW9uZWQ6IHByb3BzLnZlcnNpb25lZCB8fCBmYWxzZSxcbiAgICAgIGNvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG1heEFnZTogMzAwMCxcbiAgICAgICAgICBleHBvc2VkSGVhZGVyczogW1xuICAgICAgICAgICAgJ3gtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24nLFxuICAgICAgICAgICAgJ3gtYW16LXJlcXVlc3QtaWQnLFxuICAgICAgICAgICAgJ3gtYW16LWlkLTInLFxuICAgICAgICAgICAgJ0VUYWcnLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgYWxsb3dlZEhlYWRlcnM6IFsnKiddLFxuICAgICAgICAgIGFsbG93ZWRPcmlnaW5zOiBbJyonXSxcbiAgICAgICAgICBhbGxvd2VkTWV0aG9kczogW1xuICAgICAgICAgICAgSHR0cE1ldGhvZHMuR0VULFxuICAgICAgICAgICAgSHR0cE1ldGhvZHMuSEVBRCxcbiAgICAgICAgICAgIEh0dHBNZXRob2RzLlBVVCxcbiAgICAgICAgICAgIEh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgICAgICBIdHRwTWV0aG9kcy5ERUxFVEUsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBhdXRvRGVsZXRlT2JqZWN0czogdHJ1ZSxcbiAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgIGVuZm9yY2VTU0w6IHRydWUsXG4gICAgfTtcblxuICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBCdWNrZXQodGhpcywgJ0J1Y2tldCcsIGJ1Y2tldFByb3BzKTtcblxuICAgIHRoaXMucmVzb3VyY2VzID0ge1xuICAgICAgYnVja2V0LFxuICAgICAgY2ZuUmVzb3VyY2VzOiB7XG4gICAgICAgIGNmbkJ1Y2tldDogYnVja2V0Lm5vZGUuZmluZENoaWxkKCdSZXNvdXJjZScpIGFzIENmbkJ1Y2tldCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIG5ldyBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSgpLnN0b3JlQXR0cmlidXRpb25NZXRhZGF0YShcbiAgICAgIFN0YWNrLm9mKHRoaXMpLFxuICAgICAgc3RvcmFnZVN0YWNrVHlwZSxcbiAgICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBhIExhbWJkYSBmdW5jdGlvbiB0cmlnZ2VyIGhhbmRsZXIgdG8gdGhlIFMzIGV2ZW50c1xuICAgKiBAcGFyYW0gZXZlbnRzIC0gbGlzdCBvZiBTMyBldmVudHMgdGhhdCB3aWxsIHRyaWdnZXIgdGhlIGhhbmRsZXJcbiAgICogQHBhcmFtIGhhbmRsZXIgLSBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGhhbmRsZSB0aGUgZXZlbnRcbiAgICovXG4gIGFkZFRyaWdnZXIgPSAoZXZlbnRzOiBFdmVudFR5cGVbXSwgaGFuZGxlcjogSUZ1bmN0aW9uKTogdm9pZCA9PiB7XG4gICAgaGFuZGxlci5hZGRFdmVudFNvdXJjZShcbiAgICAgIG5ldyBTM0V2ZW50U291cmNlVjIodGhpcy5yZXNvdXJjZXMuYnVja2V0LCB7IGV2ZW50cyB9KVxuICAgICk7XG4gIH07XG59XG4iXX0=