import { SecretError } from './secret_error.js';
import { AmplifyFault, AmplifyUserError } from '@aws-amplify/platform-core';
import { SSMServiceException } from '@aws-sdk/client-ssm';
/**
 * Handles errors and translate them to AmplifyUserError or AmplifyFaults
 * To be used exclusively by the amplify cli
 */
export class SSMSecretClientWithAmplifyErrorHandling {
    secretClient;
    /**
     * wraps the secretClient with Amplify CLI specific error handling
     */
    constructor(secretClient) {
        this.secretClient = secretClient;
    }
    getSecret = async (backendIdentifier, secretIdentifier) => {
        try {
            return await this.secretClient.getSecret(backendIdentifier, secretIdentifier);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'Get');
        }
    };
    listSecrets = async (backendIdentifier) => {
        try {
            return await this.secretClient.listSecrets(backendIdentifier);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'List');
        }
    };
    setSecret = async (backendIdentifier, secretName, secretValue) => {
        try {
            return await this.secretClient.setSecret(backendIdentifier, secretName, secretValue);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'Set');
        }
    };
    removeSecret = async (backendIdentifier, secretName) => {
        try {
            return await this.secretClient.removeSecret(backendIdentifier, secretName);
        }
        catch (e) {
            throw this.translateToAmplifyError(e, 'Remove');
        }
    };
    translateToAmplifyError = (error, apiName) => {
        if (error instanceof SecretError && error.cause) {
            if ([
                'UnrecognizedClientException',
                'AccessDeniedException',
                'NotAuthorized',
                'ExpiredTokenException',
                'CredentialsProviderError',
            ].includes(error.cause.name)) {
                return new AmplifyUserError('SSMCredentialsError', {
                    message: `Failed to ${apiName.toLowerCase()} secrets. ${error.cause.name}: ${error.cause?.message}`,
                    resolution: 'Make sure your AWS credentials are set up correctly, refreshed and have necessary permissions to call SSM service',
                });
            }
            let downstreamException = error;
            if (!(error.cause instanceof SSMServiceException) &&
                error.cause instanceof Error) {
                downstreamException = error.cause;
            }
            throw new AmplifyFault(`${apiName}SecretsFailedFault`, {
                message: `Failed to ${apiName.toLowerCase()} secrets. ${error.cause.name}: ${error.cause?.message}`,
            }, downstreamException);
        }
        return error;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NtX3NlY3JldF93aXRoX2FtcGxpZnlfZXJyb3JfaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3NtX3NlY3JldF93aXRoX2FtcGxpZnlfZXJyb3JfaGFuZGxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sdUNBQXVDO0lBSXJCO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDO0lBRTNELFNBQVMsR0FBRyxLQUFLLEVBQ2YsaUJBQTRDLEVBQzVDLGdCQUFrQyxFQUNqQixFQUFFO1FBQ25CLElBQUk7WUFDRixPQUFPLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQ3RDLGlCQUFpQixFQUNqQixnQkFBZ0IsQ0FDakIsQ0FBQztTQUNIO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDLENBQUM7SUFFRixXQUFXLEdBQUcsS0FBSyxFQUNqQixpQkFBNEMsRUFDakIsRUFBRTtRQUM3QixJQUFJO1lBQ0YsT0FBTyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDL0Q7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUMsQ0FBQztJQUVGLFNBQVMsR0FBRyxLQUFLLEVBQ2YsaUJBQTRDLEVBQzVDLFVBQWtCLEVBQ2xCLFdBQW1CLEVBQ1EsRUFBRTtRQUM3QixJQUFJO1lBQ0YsT0FBTyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUN0QyxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLFdBQVcsQ0FDWixDQUFDO1NBQ0g7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUMsQ0FBQztJQUVGLFlBQVksR0FBRyxLQUFLLEVBQ2xCLGlCQUE0QyxFQUM1QyxVQUFrQixFQUNILEVBQUU7UUFDakIsSUFBSTtZQUNGLE9BQU8sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FDekMsaUJBQWlCLEVBQ2pCLFVBQVUsQ0FDWCxDQUFDO1NBQ0g7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUMsQ0FBQztJQUVNLHVCQUF1QixHQUFHLENBQUMsS0FBYyxFQUFFLE9BQWUsRUFBRSxFQUFFO1FBQ3BFLElBQUksS0FBSyxZQUFZLFdBQVcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQy9DLElBQ0U7Z0JBQ0UsNkJBQTZCO2dCQUM3Qix1QkFBdUI7Z0JBQ3ZCLGVBQWU7Z0JBQ2YsdUJBQXVCO2dCQUN2QiwwQkFBMEI7YUFDM0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDNUI7Z0JBQ0EsT0FBTyxJQUFJLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFO29CQUNqRCxPQUFPLEVBQUUsYUFBYSxPQUFPLENBQUMsV0FBVyxFQUFFLGFBQ3pDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFDZCxLQUFLLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO29CQUMzQixVQUFVLEVBQ1IsbUhBQW1IO2lCQUN0SCxDQUFDLENBQUM7YUFDSjtZQUNELElBQUksbUJBQW1CLEdBQVUsS0FBSyxDQUFDO1lBQ3ZDLElBQ0UsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLFlBQVksbUJBQW1CLENBQUM7Z0JBQzdDLEtBQUssQ0FBQyxLQUFLLFlBQVksS0FBSyxFQUM1QjtnQkFDQSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ25DO1lBQ0QsTUFBTSxJQUFJLFlBQVksQ0FDcEIsR0FBRyxPQUFPLG9CQUFvQixFQUM5QjtnQkFDRSxPQUFPLEVBQUUsYUFBYSxPQUFPLENBQUMsV0FBVyxFQUFFLGFBQ3pDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFDZCxLQUFLLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO2FBQzVCLEVBQ0QsbUJBQW1CLENBQ3BCLENBQUM7U0FDSDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBJZCwgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7XG4gIFNlY3JldCxcbiAgU2VjcmV0Q2xpZW50LFxuICBTZWNyZXRJZGVudGlmaWVyLFxuICBTZWNyZXRMaXN0SXRlbSxcbn0gZnJvbSAnLi9zZWNyZXQuanMnO1xuaW1wb3J0IHsgU2VjcmV0RXJyb3IgfSBmcm9tICcuL3NlY3JldF9lcnJvci5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQsIEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTU01TZXJ2aWNlRXhjZXB0aW9uIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNzbSc7XG5cbi8qKlxuICogSGFuZGxlcyBlcnJvcnMgYW5kIHRyYW5zbGF0ZSB0aGVtIHRvIEFtcGxpZnlVc2VyRXJyb3Igb3IgQW1wbGlmeUZhdWx0c1xuICogVG8gYmUgdXNlZCBleGNsdXNpdmVseSBieSB0aGUgYW1wbGlmeSBjbGlcbiAqL1xuZXhwb3J0IGNsYXNzIFNTTVNlY3JldENsaWVudFdpdGhBbXBsaWZ5RXJyb3JIYW5kbGluZyBpbXBsZW1lbnRzIFNlY3JldENsaWVudCB7XG4gIC8qKlxuICAgKiB3cmFwcyB0aGUgc2VjcmV0Q2xpZW50IHdpdGggQW1wbGlmeSBDTEkgc3BlY2lmaWMgZXJyb3IgaGFuZGxpbmdcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnQpIHt9XG5cbiAgZ2V0U2VjcmV0ID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkLFxuICAgIHNlY3JldElkZW50aWZpZXI6IFNlY3JldElkZW50aWZpZXJcbiAgKTogUHJvbWlzZTxTZWNyZXQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50LmdldFNlY3JldChcbiAgICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgICAgIHNlY3JldElkZW50aWZpZXJcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgdGhpcy50cmFuc2xhdGVUb0FtcGxpZnlFcnJvcihlLCAnR2V0Jyk7XG4gICAgfVxuICB9O1xuXG4gIGxpc3RTZWNyZXRzID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkXG4gICk6IFByb21pc2U8U2VjcmV0TGlzdEl0ZW1bXT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQubGlzdFNlY3JldHMoYmFja2VuZElkZW50aWZpZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IHRoaXMudHJhbnNsYXRlVG9BbXBsaWZ5RXJyb3IoZSwgJ0xpc3QnKTtcbiAgICB9XG4gIH07XG5cbiAgc2V0U2VjcmV0ID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkLFxuICAgIHNlY3JldE5hbWU6IHN0cmluZyxcbiAgICBzZWNyZXRWYWx1ZTogc3RyaW5nXG4gICk6IFByb21pc2U8U2VjcmV0SWRlbnRpZmllcj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQuc2V0U2VjcmV0KFxuICAgICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICAgICAgc2VjcmV0TmFtZSxcbiAgICAgICAgc2VjcmV0VmFsdWVcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgdGhpcy50cmFuc2xhdGVUb0FtcGxpZnlFcnJvcihlLCAnU2V0Jyk7XG4gICAgfVxuICB9O1xuXG4gIHJlbW92ZVNlY3JldCA9IGFzeW5jIChcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZCxcbiAgICBzZWNyZXROYW1lOiBzdHJpbmdcbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNlY3JldENsaWVudC5yZW1vdmVTZWNyZXQoXG4gICAgICAgIGJhY2tlbmRJZGVudGlmaWVyLFxuICAgICAgICBzZWNyZXROYW1lXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IHRoaXMudHJhbnNsYXRlVG9BbXBsaWZ5RXJyb3IoZSwgJ1JlbW92ZScpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIHRyYW5zbGF0ZVRvQW1wbGlmeUVycm9yID0gKGVycm9yOiB1bmtub3duLCBhcGlOYW1lOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBTZWNyZXRFcnJvciAmJiBlcnJvci5jYXVzZSkge1xuICAgICAgaWYgKFxuICAgICAgICBbXG4gICAgICAgICAgJ1VucmVjb2duaXplZENsaWVudEV4Y2VwdGlvbicsXG4gICAgICAgICAgJ0FjY2Vzc0RlbmllZEV4Y2VwdGlvbicsXG4gICAgICAgICAgJ05vdEF1dGhvcml6ZWQnLFxuICAgICAgICAgICdFeHBpcmVkVG9rZW5FeGNlcHRpb24nLFxuICAgICAgICAgICdDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3InLFxuICAgICAgICBdLmluY2x1ZGVzKGVycm9yLmNhdXNlLm5hbWUpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbXBsaWZ5VXNlckVycm9yKCdTU01DcmVkZW50aWFsc0Vycm9yJywge1xuICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gJHthcGlOYW1lLnRvTG93ZXJDYXNlKCl9IHNlY3JldHMuICR7XG4gICAgICAgICAgICBlcnJvci5jYXVzZS5uYW1lXG4gICAgICAgICAgfTogJHtlcnJvci5jYXVzZT8ubWVzc2FnZX1gLFxuICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAnTWFrZSBzdXJlIHlvdXIgQVdTIGNyZWRlbnRpYWxzIGFyZSBzZXQgdXAgY29ycmVjdGx5LCByZWZyZXNoZWQgYW5kIGhhdmUgbmVjZXNzYXJ5IHBlcm1pc3Npb25zIHRvIGNhbGwgU1NNIHNlcnZpY2UnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxldCBkb3duc3RyZWFtRXhjZXB0aW9uOiBFcnJvciA9IGVycm9yO1xuICAgICAgaWYgKFxuICAgICAgICAhKGVycm9yLmNhdXNlIGluc3RhbmNlb2YgU1NNU2VydmljZUV4Y2VwdGlvbikgJiZcbiAgICAgICAgZXJyb3IuY2F1c2UgaW5zdGFuY2VvZiBFcnJvclxuICAgICAgKSB7XG4gICAgICAgIGRvd25zdHJlYW1FeGNlcHRpb24gPSBlcnJvci5jYXVzZTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoXG4gICAgICAgIGAke2FwaU5hbWV9U2VjcmV0c0ZhaWxlZEZhdWx0YCxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gJHthcGlOYW1lLnRvTG93ZXJDYXNlKCl9IHNlY3JldHMuICR7XG4gICAgICAgICAgICBlcnJvci5jYXVzZS5uYW1lXG4gICAgICAgICAgfTogJHtlcnJvci5jYXVzZT8ubWVzc2FnZX1gLFxuICAgICAgICB9LFxuICAgICAgICBkb3duc3RyZWFtRXhjZXB0aW9uXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG4gIH07XG59XG4iXX0=